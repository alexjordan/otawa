
// otawa_kind of instructions
// Used to know in which functional unit the instruction is executed

let NO_KIND	= 0x00000000
let IS_COND	= 0x00000001
let IS_CONTROL	= 0x00000002
let IS_CALL	= 0x00000004	// save PC before branching
let IS_RETURN	= 0x00000008
let IS_MEM	= 0x00000010
let IS_LOAD	= 0x00000020
let IS_STORE	= 0x00000040
let IS_INT	= 0x00000080
let IS_FLOAT	= 0x00000100
let IS_ALU	= 0x00000200	// basic arithmetic operations (like "+", "-")
let IS_MUL	= 0x00000400
let IS_DIV	= 0x00000800
let IS_SHIFT	= 0x00001000
let IS_TRAP	= 0x00002000
let IS_SPECIAL	= 0x00010000
let IS_CACHED = 0x80000

let IS_DELAYED  = 0x01000000
let IS_LOCAL    = 0x02000000


// ALU operations, multiply
extend ALUi_fmt
	otawa_kind = IS_INT | IS_ALU | if func.is_shift then IS_SHIFT else NO_KIND endif

extend ALUl_fmt, ALUr_fmt
	otawa_kind = IS_INT | IS_ALU | if func.is_shift then IS_SHIFT else NO_KIND endif

extend ALUm_fmt
	otawa_kind = IS_INT | IS_MUL

// Comparisons
extend ALUc_fmt, ALUci_fmt
	otawa_kind = IS_INT

// Predicate operations
extend ALUp_fmt, ALUb_fmt
	otawa_kind = IS_INT

// Special instructions
extend SPCw_fmt
	otawa_kind = IS_MEM | IS_SPECIAL

extend SPCt_fmt, SPCf_fmt
	otawa_kind = IS_INT | IS_SPECIAL


// Load and store
extend LDT_fmt
	otawa_kind = IS_INT | IS_MEM | IS_LOAD | if func.is_cache then IS_CACHED else NO_KIND endif

extend STT_fmt
	otawa_kind = IS_INT | IS_MEM | IS_STORE | if func.is_cache then IS_CACHED else NO_KIND endif

// Stack control
extend STCi_fmt, STCr_fmt
	otawa_kind = IS_INT | IS_MEM | IS_SPECIAL

// Control flow
extend Pred_fmt
	otawa_kind = if guard.always_true then NO_KIND else IS_COND endif | x.otawa_kind

extend CFLi_fmt, CFLrs_fmt, CFLrt_fmt
	otawa_kind = IS_CONTROL | if func.is_call then IS_CALL else NO_KIND endif
	                        | if d then IS_DELAYED else NO_KIND endif
				| if func.is_local then IS_LOCAL else NO_KIND endif

extend CFLri_fmt
	otawa_kind = IS_CONTROL | IS_RETURN 
	                        | if d then IS_DELAYED else NO_KIND endif

